---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M6S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import grid_img from '/assets/07/m6s/double_style_p4/spread_grid@2x.png?url'
  import floor_img from '/assets/07/m6s/floor_8@3x.png?url'
  import omen_img from '/assets/rect/7x34_y17@3x.png?url'
  import target_ring_img from '/assets/target_ring/r4@3x.png?url'

  const name = 'spread_2'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkData, 0.65)

    const squareMask = new Graphics()
    const width = 46.4 * YmToPx // 46.4
    squareMask.rect(-width / 2, -width / 2, width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const omenParams = [
      { x: -10.5, y: -22, r: Math.PI },
      { x: 3.5, y: -22, r: Math.PI },
      { x: 17.5, y: -22, r: Math.PI },
      { x: 22, y: -10.5, r: Math.PI * 1.5 },
      { x: 22, y: 3.5, r: Math.PI * 1.5 },
      { x: 22, y: 17.5, r: Math.PI * 1.5 },
    ]

    const omenTexture = await Assets.load(omen_img)
    omenParams.forEach((r) => {
      const sprite = Sprite.from(omenTexture)
      sprite.pivot.set(0, (17 / getScale()) * YmToPx)
      sprite.anchor.set(0.5, 0.5)
      sprite.scale.set(getScale(), (getScale() * 44) / 34)
      sprite.position.set(r.x * YmToPx, r.y * YmToPx)
      sprite.rotation = r.r
      container.addChild(sprite)

      const squareMask = new Graphics()
      const width = 40 * YmToPx // 46.4
      squareMask.rect(-width / 2, -width / 2, width, width)
      squareMask.fill({ color: 'white' })
      sprite.mask = squareMask
      container.addChild(squareMask)
    })

    const target_circle_texture = await Assets.load(target_ring_img)
    const target_circle = Sprite.from(target_circle_texture)
    target_circle.anchor.set(0.5, 0.54)
    target_circle.position.set(-7.5 * YmToPx, 3.5 * YmToPx)
    target_circle.rotation = (-13 * Math.PI) / 20
    container.addChild(target_circle)

    const gridTexture = await Assets.load(grid_img)
    const grid = Sprite.from(gridTexture)
    grid.anchor.set(0.5, 0.5)
    container.addChild(grid)

    const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
      { type: 'ranged', tag: 'D3', x: -17, y: -17 },
      { type: 'magic', tag: 'D4', x: 10.5, y: -17 },
      { type: 'melee', tag: 'D1', x: -17, y: -3.5 },
      { type: 'tank', tag: 'MT', x: -5, y: -3 },
      { type: 'tank', tag: 'ST', x: 10.5, y: -3.5 },
      { type: 'healer', tag: 'H1', x: -16, y: 12 },
      { type: 'melee', tag: 'D2', x: -3.5, y: 10.5 },
      { type: 'healer', tag: 'H2', x: 9, y: 12 },
    ]

    roleParams.forEach((r) => {
      const role = new Role(r.type, r.tag)
      role.scale.set(0.4)
      role.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(role)
    })

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
