---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M6S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { DropShadowFilter } from 'pixi-filters'
  import { Assets, Container, Graphics, Sprite, TilingSprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import end_img from '/assets/07/m6s/channeling/blue_end@5x.png?url'
  import tether_img from '/assets/07/m6s/channeling/blue@50x.png?url'
  import floor_img from '/assets/07/m6s/floor_8@3x.png?url'
  import arrow_mark_img from '/assets/07/m6s/paint_mark/arrow@3x.png?url'
  import fire_mark_img from '/assets/07/m6s/paint_mark/fire@3x.png?url'
  import vfx_img from '/assets/game/vfx/lockon/eff/com_share4a1@3x.png?url'
  import omen_img from '/assets/rect/7x34_y17@3x.png?url'
  import target_ring_img from '/assets/target_ring/r4@3x.png?url'

  const name = 'fire_2'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkData, 0.65)

    const squareMask = new Graphics()
    const width = 46.4 * YmToPx // 46.4
    squareMask.rect(-width / 2, -width / 2, width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const arrowMarkPosition = {
      x: -7.5 - 3.5 * Math.sin((Math.PI * 3) / 20),
      y: 3.5 - 3.5 * Math.cos((Math.PI * 3) / 20),
    }

    const omenParams = [
      { x: -10.5, y: -22, r: Math.PI },
      { x: 3.5, y: -22, r: Math.PI },
      { x: 17.5, y: -22, r: Math.PI },
      { x: 22, y: -10.5, r: Math.PI * 1.5 },
      { x: 22, y: 3.5, r: Math.PI * 1.5 },
      { x: 22, y: 17.5, r: Math.PI * 1.5 },
    ]

    const omenTexture = await Assets.load(omen_img)
    omenParams.forEach((r) => {
      const sprite = Sprite.from(omenTexture)
      sprite.pivot.set(0, (17 / getScale()) * YmToPx)
      sprite.anchor.set(0.5, 0.5)
      sprite.scale.set(getScale(), (getScale() * 44) / 34)
      sprite.position.set(r.x * YmToPx, r.y * YmToPx)
      sprite.rotation = r.r
      container.addChild(sprite)

      const squareMask = new Graphics()
      const width = 40 * YmToPx // 46.4
      squareMask.rect(-width / 2, -width / 2, width, width)
      squareMask.fill({ color: 'white' })
      sprite.mask = squareMask
      container.addChild(squareMask)
    })

    const target_circle_texture = await Assets.load(target_ring_img)
    const target_circle = Sprite.from(target_circle_texture)
    target_circle.anchor.set(0.5, 0.54)
    target_circle.position.set(-7.5 * YmToPx, 3.5 * YmToPx)
    target_circle.rotation = (-13 * Math.PI) / 20
    container.addChild(target_circle)

    const endTexture = await Assets.load(end_img)
    omenParams.forEach((r) => {
      const end = new Sprite(endTexture)
      end.anchor.set(0.5, 0.5)
      end.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(end)
    })

    const tetherTexture = await Assets.load(tether_img)
    omenParams.forEach((t) => {
      const tether = new TilingSprite({
        texture: tetherTexture,
        width: Math.sqrt((t.x - arrowMarkPosition.x) ** 2 + (t.y - arrowMarkPosition.y) ** 2) * YmToPx,
        height: 256 / 50,
      })
      tether.anchor.set(0, 0.5)
      tether.position.set(arrowMarkPosition.x * YmToPx, arrowMarkPosition.y * YmToPx)
      tether.rotation = Math.atan2(t.y - arrowMarkPosition.y, t.x - arrowMarkPosition.x)
      const shadow = new TilingSprite({
        texture: tetherTexture,
        width: Math.sqrt((t.x - arrowMarkPosition.x) ** 2 + (t.y - arrowMarkPosition.y) ** 2) * YmToPx,
        height: 256 / 50,
      })
      shadow.anchor.set(0, 0.5)
      shadow.position.set(arrowMarkPosition.x * YmToPx, arrowMarkPosition.y * YmToPx)
      shadow.rotation = Math.atan2(t.y - arrowMarkPosition.y, t.x - arrowMarkPosition.x)
      shadow.filters = [
        new DropShadowFilter({
          offset: { x: 0, y: 0 },
          alpha: 0.7,
          shadowOnly: true,
        }),
      ]
      container.addChild(shadow)
      container.addChild(tether)
    })

    const vfxParams = [
      { x: -28 + 12.625, y: 14 - 5.375 },
      { x: 1.625 - 4, y: 2.125 - 4 },
    ]

    const vfxTexture = await Assets.load(vfx_img)
    vfxParams.forEach((r) => {
      const vfx = Sprite.from(vfxTexture)
      vfx.anchor.set(0.5, 0.5)
      vfx.position.set(r.x * YmToPx, r.y * YmToPx)
      vfx.scale.set(getScale() * 0.5)
      container.addChild(vfx)
    })

    const fireMarkTexture = await Assets.load(fire_mark_img)
    const fireMark = Sprite.from(fireMarkTexture)
    fireMark.anchor.set(0.5, 0.5)
    fireMark.position.set(
      (-7.5 + 3.5 * Math.sin((Math.PI * 3) / 20)) * YmToPx,
      (3.5 + 3.5 * Math.cos((Math.PI * 3) / 20)) * YmToPx,
    )
    fireMark.scale.set(getScale(20, 0.78))
    container.addChild(fireMark)

    const arrowMarkTexture = await Assets.load(arrow_mark_img)
    const arrowMark = Sprite.from(arrowMarkTexture)
    arrowMark.anchor.set(0.5, 0.5)
    arrowMark.position.set(arrowMarkPosition.x * YmToPx, arrowMarkPosition.y * YmToPx)
    arrowMark.scale.set(getScale(20, 0.78))
    container.addChild(arrowMark)

    const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
      { type: 'tank', tag: 'MT', x: -11.75 - 2.75, y: 4.25 + 3.25 },
      { type: 'healer', tag: 'H1', x: -13.5 - 2.75, y: 6.5 + 3.25 },
      { type: 'melee', tag: 'D1', x: -13.5 - 2.75, y: 4.25 + 3.25 },
      { type: 'melee', tag: 'D2', x: -11.75 - 2.75, y: 6.5 + 3.25 },
      { type: 'tank', tag: 'ST', x: 2.5 - 4, y: 3.25 - 4 },
      { type: 'healer', tag: 'H2', x: 0.75 - 4, y: 3.25 - 4 },
      { type: 'ranged', tag: 'D3', x: 0.75 - 4, y: 1 - 4 },
      { type: 'magic', tag: 'D4', x: 2.5 - 4, y: 1 - 4 },
    ]

    roleParams.forEach((r) => {
      const role = new Role(r.type, r.tag)
      role.scale.set(0.3)
      role.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(role)
    })

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
