---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M6S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { DropShadowFilter } from 'pixi-filters'
  import { Assets, Container, Graphics, Sprite, TilingSprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import feather_ray_img from '/assets/07/m6s/adds/feather_ray.png?url'
  import gimme_cat_img from '/assets/07/m6s/adds/gimme_cat.png?url'
  import jabberwock_img from '/assets/07/m6s/adds/jabberwock.png?url'
  import mu_img from '/assets/07/m6s/adds/mu.png?url'
  import yan_img from '/assets/07/m6s/adds/yan.png?url'
  import boss_img from '/assets/07/m6s/boss.png?url'
  import floor_img from '/assets/07/m6s/floor_1@3x.png?url'
  import arrow from '/assets/07/m6s/soul_sugar/wave4_solution_3_arrow@2x.png?url'
  import cat_omen_img from '/assets/fan/360_r20@3x.png?url'
  import omen_img from '/assets/game/bg/ex5/01_xkt_x6/common/vfx/eff/b3534wat01_a2@3x.png?url'
  import tether_img from '/assets/game/vfx/channeling/eff/chn_tergetfix1f.png?url'
  import bind_img from '/assets/game/vfx/common/eff/dk10ht_bind0h@3x.png?url'

  const name = 'wave4_solution_3'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    const squareMask = new Graphics()
    const width = 46.4 * YmToPx // 39.8 46.4
    squareMask.rect(-width / 2, -width / 2, width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const cat_omen_texture = await Assets.load(cat_omen_img)
    const cat_omen = new Sprite(cat_omen_texture)
    cat_omen.anchor.set(0.5, 0.5)
    cat_omen.scale.set((getScale() * 6) / 20)
    cat_omen.position.set(4.5 * YmToPx, 8 * YmToPx)
    container.addChild(cat_omen)

    const omenParams = [
      { x: -5.5, y: -19 },
      { x: 5.5, y: -19 },
      { x: -15.25, y: -19 },
      { x: -19, y: -9.75 },
      { x: 15.25, y: -19 },
    ]
    const omenTexture = await Assets.load(omen_img)
    omenParams.forEach((o) => {
      const omen = new Sprite(omenTexture)
      omen.anchor.set(0.5, 0.5)
      omen.position.set(o.x * YmToPx, o.y * YmToPx)
      omen.scale.set(getScale())
      container.addChild(omen)
    })

    await setWaymark(container, waymarkData, 0.65)

    const jabberwock_texture = await Assets.load(jabberwock_img)
    const jabberwock = Sprite.from(jabberwock_texture)
    jabberwock.anchor.set(0.5, 0.5)
    jabberwock.scale.set(-0.03 * 1.02, 0.03 * 1.02)
    jabberwock.position.set(2.5 * YmToPx, -9.5 * YmToPx)
    const jabberwockShadow = Sprite.from(jabberwock_texture)
    jabberwockShadow.anchor.set(0.5, 0.5)
    jabberwockShadow.scale.set(-0.03 * 1.02, 0.03 * 1.02)
    jabberwockShadow.position.set(2.5 * YmToPx, -9.5 * YmToPx)
    jabberwockShadow.filters = [
      new DropShadowFilter({
        offset: { x: 0, y: 0 },
        alpha: 0.7,
        shadowOnly: true,
      }),
    ]
    container.addChild(jabberwockShadow)
    container.addChild(jabberwock)

    const boss_texture = await Assets.load(boss_img)
    const boss = Sprite.from(boss_texture)
    boss.anchor.set(0.5, 0.5)
    boss.scale.set(0.02)
    boss.position.set(7 * YmToPx, 5 * YmToPx)
    const bossShadow = Sprite.from(boss_texture)
    bossShadow.anchor.set(0.5, 0.5)
    bossShadow.scale.set(0.02 * 1.02)
    bossShadow.position.set(7 * YmToPx, 5 * YmToPx)
    bossShadow.filters = [
      new DropShadowFilter({
        offset: { x: 0, y: 0 },
        alpha: 0.7,
        shadowOnly: true,
      }),
    ]
    container.addChild(bossShadow)
    container.addChild(boss)

    const techerParams = [
      { x1: -10, y1: 5, x2: -19, y2: 0 },
      { x1: 10, y1: 5, x2: 19, y2: -9.75 },
    ]
    const tetherTexture = await Assets.load(tether_img)
    techerParams.forEach((t) => {
      const tether = new TilingSprite({
        texture: tetherTexture,
        width: (Math.sqrt((t.x1 - t.x2) ** 2 + (t.y1 - t.y2) ** 2) * YmToPx) / getScale(),
        height: 64,
      })
      tether.anchor.set(0, 0.5)
      tether.position.set(t.x1 * YmToPx, t.y1 * YmToPx)
      tether.rotation = Math.atan2(t.y2 - t.y1, t.x2 - t.x1)
      tether.scale.set(getScale())
      container.addChild(tether)
    })

    const feather_ray_texture = await Assets.load(feather_ray_img)
    const feather_rayParams = [
      { x: -10, y: 5 },
      { x: 10, y: 5 },
    ]
    feather_rayParams.forEach((m) => {
      const feather_ray = Sprite.from(feather_ray_texture)
      feather_ray.anchor.set(0.5, 0.5)
      feather_ray.scale.set(0.0225)
      feather_ray.position.set(m.x * YmToPx, m.y * YmToPx)
      const feather_rayShadow = Sprite.from(feather_ray_texture)
      feather_rayShadow.anchor.set(0.5, 0.5)
      feather_rayShadow.scale.set(0.0225 * 1.02)
      feather_rayShadow.position.set(m.x * YmToPx, m.y * YmToPx)
      feather_rayShadow.filters = [
        new DropShadowFilter({
          offset: { x: 0, y: 0 },
          alpha: 0.7,
          shadowOnly: true,
        }),
      ]
      container.addChild(feather_rayShadow)
      container.addChild(feather_ray)
    })

    const bindParams = [{ x: 10, y: 16 }]
    const bindTexture = await Assets.load(bind_img)
    bindParams.forEach((b) => {
      const bind = new Sprite(bindTexture)
      bind.anchor.set(0.5, 0.5)
      bind.position.set(b.x * YmToPx, b.y * YmToPx)
      bind.scale.set(getScale(10) * 3)
      container.addChild(bind)
    })

    const yan_texture = await Assets.load(yan_img)
    const yanParams = [
      { x: 0, y: -10.25 },
      { x: 0, y: -8.25 },
    ]
    yanParams.forEach((y) => {
      const yan = Sprite.from(yan_texture)
      yan.anchor.set(0.5, 0.5)
      yan.scale.set(0.02)
      yan.position.set(y.x * YmToPx, y.y * YmToPx)
      const yanShadow = Sprite.from(yan_texture)
      yanShadow.anchor.set(0.5, 0.5)
      yanShadow.scale.set(0.02 * 1.02)
      yanShadow.position.set(y.x * YmToPx, y.y * YmToPx)
      yanShadow.filters = [
        new DropShadowFilter({
          offset: { x: 0, y: 0 },
          alpha: 0.7,
          shadowOnly: true,
        }),
      ]
      container.addChild(yanShadow)
      container.addChild(yan)
    })

    const mu_texture = await Assets.load(mu_img)
    const muParams = [
      { x: 7, y: 7.5 },
      { x: 10, y: 7.5 },
    ]
    muParams.forEach((m) => {
      const mu = Sprite.from(mu_texture)
      mu.anchor.set(0.5, 0.5)
      mu.scale.set(0.0175)
      mu.position.set(m.x * YmToPx, m.y * YmToPx)
      const muShadow = Sprite.from(mu_texture)
      muShadow.anchor.set(0.5, 0.5)
      muShadow.scale.set(0.0175 * 1.02)
      muShadow.position.set(m.x * YmToPx, m.y * YmToPx)
      muShadow.filters = [
        new DropShadowFilter({
          offset: { x: 0, y: 0 },
          alpha: 0.7,
          shadowOnly: true,
        }),
      ]
      container.addChild(muShadow)
      container.addChild(mu)
    })

    const gimme_cat_texture = await Assets.load(gimme_cat_img)
    const gimme_cat = Sprite.from(gimme_cat_texture)
    gimme_cat.anchor.set(0.5, 0.5)
    gimme_cat.scale.set(0.025)
    gimme_cat.position.set(4.5 * YmToPx, 8 * YmToPx)
    const gimme_catShadow = Sprite.from(gimme_cat_texture)
    gimme_catShadow.anchor.set(0.5, 0.5)
    gimme_catShadow.scale.set(0.025 * 1.02)
    gimme_catShadow.position.set(4.5 * YmToPx, 8 * YmToPx)
    gimme_catShadow.filters = [
      new DropShadowFilter({
        offset: { x: 0, y: 0 },
        alpha: 0.7,
        shadowOnly: true,
      }),
    ]
    container.addChild(gimme_catShadow)
    container.addChild(gimme_cat)

    const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
      { type: 'tank', tag: 'MT', x: 8.5, y: 10 },
      { type: 'tank', tag: 'ST', x: 0.5, y: -5.25 },
      { type: 'melee', tag: '', x: 3, y: -5.25 },
      { type: 'healer', tag: '', x: 10, y: 16 },
      { type: 'ranged', tag: 'D3', x: -19, y: 0 },
      { type: 'magic', tag: 'D4', x: 19, y: -9.75 },
    ]

    roleParams.forEach((r) => {
      const role = new Role(r.type, r.tag)
      role.scale.set(0.4)
      role.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(role)
    })

    const arrowTexture = await Assets.load(arrow)
    const a = Sprite.from(arrowTexture)
    a.anchor.set(0.5, 0.5)
    container.addChild(a)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
