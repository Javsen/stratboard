---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M6S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/pixi/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import floor_img from '/assets/07/m6s/floor_1@3x.png?url'
  import target_ring_img from '/assets/target_ring/r4@3x.png?url'

  const name = 'sticky_mousse'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkData, 0.65)

    const squareMask = new Graphics()
    const width = 46.4 * YmToPx // 46.4
    squareMask.rect(-width / 2, -width / 2, width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const x = 1
    const y = -0.5
    const r = (-12 * Math.PI) / 20

    const c = new Container()
    c.position.set(x * YmToPx, y * YmToPx)
    c.rotation = r
    container.addChild(c)

    const target_circle_texture = await Assets.load(target_ring_img)
    const target_circle = Sprite.from(target_circle_texture)
    target_circle.anchor.set(0.5, 0.54)
    c.addChild(target_circle)

    const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
      { type: 'tank', tag: 'MT', x: 0, y: -1.25 },
      { type: 'tank', tag: 'ST', x: 0, y: 1.25 },
      { type: 'ranged', tag: 'D3', x: -3.5, y: -3.5 * Math.sqrt(3) },
      { type: 'magic', tag: 'D4', x: 3.5, y: -3.5 * Math.sqrt(3) },
      { type: 'healer', tag: 'H1', x: -7, y: 0 },
      { type: 'healer', tag: 'H2', x: 7, y: 0 },
      { type: 'melee', tag: 'D1', x: -3.5, y: 3.5 * Math.sqrt(3) },
      { type: 'melee', tag: 'D2', x: 3.5, y: 3.5 * Math.sqrt(3) },
    ]

    roleParams.forEach((v) => {
      const role = new Role(v.type, v.tag)
      role.scale.set(0.4)
      role.position.set(v.x * YmToPx, v.y * YmToPx)
      role.rotation = -r
      c.addChild(role)
    })

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
