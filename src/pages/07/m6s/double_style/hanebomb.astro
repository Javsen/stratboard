---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M6S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { DropShadowFilter } from 'pixi-filters'
  import { Assets, Container, Graphics, Sprite, TilingSprite } from 'pixi.js'

  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import end_img from '/assets/07/m6s/channeling/purple_end@5x.png?url'
  import tether_img from '/assets/07/m6s/channeling/purple@50x.png?url'
  import hanebom_arrow from '/assets/07/m6s/double_style/hanebom_arrow@2x.png?url'
  import floor_img from '/assets/07/m6s/floor_2@3x.png?url'
  import mark_img from '/assets/07/m6s/paint_mark/hanebomb@3x.png?url'
  import omen_img from '/assets/fan/360_r20@3x.png?url'

  const name = 'hanebomb'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkData, 0.65)

    const squareMask = new Graphics()
    const width = 46.4 * YmToPx // 39.8 46.4
    squareMask.rect(-width / 2, -width / 2, width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const omenParams = [
      { x: -8, y: -17 },
      { x: -8, y: 0 },
      { x: -8, y: 17 },
    ]

    const omenTexture = await Assets.load(omen_img)
    omenParams.forEach((r) => {
      const sprite = new Sprite(omenTexture)
      sprite.anchor.set(0.5, 0.5)
      sprite.scale.set(getScale() * 0.75)
      sprite.position.set(-r.x * YmToPx, r.y * YmToPx)
      container.addChild(sprite)
    })

    const endTexture = await Assets.load(end_img)
    omenParams.forEach((r) => {
      const end = new Sprite(endTexture)
      end.anchor.set(0.5, 0.5)
      end.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(end)
    })

    omenParams.forEach((r) => {
      const end = new Sprite(endTexture)
      end.anchor.set(0.5, 0.5)
      end.position.set(-r.x * YmToPx, r.y * YmToPx)
      end.alpha = 0.5
      container.addChild(end)
    })

    const tetherTexture = await Assets.load(tether_img)
    omenParams.forEach((t) => {
      const tether = new TilingSprite({
        texture: tetherTexture,
        width: Math.sqrt((t.x + 3.5) ** 2 + t.y ** 2) * YmToPx,
        height: 256 / 50,
      })
      tether.anchor.set(0, 0.5)
      tether.position.set(-3.5 * YmToPx, 0)
      tether.rotation = Math.atan2(t.y, t.x + 3.5)
      const shadow = new TilingSprite({
        texture: tetherTexture,
        width: Math.sqrt((t.x + 3.5) ** 2 + t.y ** 2) * YmToPx,
        height: 256 / 50,
      })
      shadow.anchor.set(0, 0.5)
      shadow.position.set(-3.5 * YmToPx, 0)
      shadow.rotation = Math.atan2(t.y, t.x + 3.5)
      shadow.filters = [
        new DropShadowFilter({
          offset: { x: 0, y: 0 },
          alpha: 0.7,
          shadowOnly: true,
        }),
      ]
      container.addChild(shadow)
      container.addChild(tether)
    })

    const markTexture = await Assets.load(mark_img)
    const mark = Sprite.from(markTexture)
    mark.anchor.set(0.5, 0.5)
    mark.position.set(-3.5 * YmToPx, 0)
    mark.scale.set(getScale(20, 0.78))
    container.addChild(mark)

    const hanebomArrowTexture = await Assets.load(hanebom_arrow)
    const hanebomArrow = Sprite.from(hanebomArrowTexture)
    hanebomArrow.anchor.set(0.5, 0.5)
    container.addChild(hanebomArrow)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
