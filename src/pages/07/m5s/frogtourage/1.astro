---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import floor1_img from '/assets/07/m5s/floor_1@3x.png?url'
  import floor_frogtourage_1_img from '/assets/07/m5s/floor_frogtourage_1@3x.png?url'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor1_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    const squareMask = new Graphics()
    const width = 50 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    // const arrow3Texture = await Assets.load(arrow3_img)
    // const arrow8Texture = await Assets.load(arrow8_img)
    const floorFrogtourage1Texture = await Assets.load(floor_frogtourage_1_img)
    // const floorFrogtourage2Texture = await Assets.load(floor_frogtourage_2_img)

    const name = 'frogtourage-3'
    const floorFrogtourage1 = Sprite.from(floorFrogtourage1Texture)
    floorFrogtourage1.anchor.set(0.5, 0.5)
    floorFrogtourage1.scale.set(getScale())
    container.addChild(floorFrogtourage1)
    const squareMask1 = new Graphics()
    const width1 = 42 * YmToPx
    squareMask1.rect(-width1 / 2, -width1 / 2, width1, width1)
    squareMask1.fill({ color: 'white' })
    floorFrogtourage1.mask = squareMask1
    container.addChild(squareMask1)

    // const name = 'frogtourage-4'
    // const floorFrogtourage2 = Sprite.from(floorFrogtourage2Texture)
    // floorFrogtourage2.anchor.set(0.5, 0.5)
    // floorFrogtourage2.scale.set(getScale())
    // container.addChild(floorFrogtourage2)
    // const squareMask2 = new Graphics()
    // const width2 = 42 * YmToPx
    // squareMask2.rect(-width2 / 2, -width2 / 2, width2, width2)
    // squareMask2.fill({ color: 'white' })
    // floorFrogtourage2.mask = squareMask2
    // container.addChild(squareMask2)

    // const name = 'frogtourage-1'
    // for (const p of [
    //   { x: -12.5, y: 20, r: 0 },
    //   { x: 12.5, y: 20, r: 180 },
    //   { x: -12.5, y: -20, r: 180 },
    //   { x: 12.5, y: -20, r: 0 },
    // ]) {
    //   const arrow3 = Sprite.from(arrow3Texture)
    //   arrow3.anchor.set(0.5, 0.5)
    //   arrow3.scale.set(getScale())
    //   arrow3.position.set(p.x * YmToPx, p.y * YmToPx)
    //   arrow3.rotation = (p.r / 180) * Math.PI
    //   container.addChild(arrow3)
    // }
    // for (const p of [
    //   { x: -5, y: 0, r: 0 },
    //   { x: 5, y: 0, r: 0 },
    //   { x: -20, y: 0, r: 180 },
    //   { x: 20, y: 0, r: 180 },
    // ]) {
    //   const arrow8 = Sprite.from(arrow8Texture)
    //   arrow8.anchor.set(0.5, 0.5)
    //   arrow8.scale.set(getScale())
    //   arrow8.position.set(p.x * YmToPx, p.y * YmToPx)
    //   arrow8.rotation = (p.r / 180) * Math.PI
    //   container.addChild(arrow8)
    // }

    // const name = 'frogtourage-2'
    // for (const p of [
    //   { x: -2.5, y: 20, r: 0 },
    //   { x: -2.5, y: -20, r: 180 },
    // ]) {
    //   const arrow3 = Sprite.from(arrow3Texture)
    //   arrow3.anchor.set(0.5, 0.5)
    //   arrow3.scale.set(getScale())
    //   arrow3.position.set(p.x * YmToPx, p.y * YmToPx)
    //   arrow3.rotation = (p.r / 180) * Math.PI
    //   container.addChild(arrow3)
    // }
    // for (const p of [
    //   { x: 5, y: 0, r: 0 },
    //   { x: -10, y: 0, r: 180 },
    // ]) {
    //   const arrow8 = Sprite.from(arrow8Texture)
    //   arrow8.anchor.set(0.5, 0.5)
    //   arrow8.scale.set(getScale())
    //   arrow8.position.set(p.x * YmToPx, p.y * YmToPx)
    //   arrow8.rotation = (p.r / 180) * Math.PI
    //   container.addChild(arrow8)
    // }

    // for (const p of [
    //   { x: 2.5, y: 20, r: 180 },
    //   { x: 2.5, y: -20, r: 0 },
    // ]) {
    //   const arrow3 = Sprite.from(arrow3Texture)
    //   arrow3.anchor.set(0.5, 0.5)
    //   arrow3.scale.set(getScale())
    //   arrow3.position.set(p.x * YmToPx, p.y * YmToPx)
    //   arrow3.rotation = (p.r / 180) * Math.PI
    //   container.addChild(arrow3)
    // }
    // for (const p of [
    //   { x: -5, y: 0, r: 0 },
    //   { x: 10, y: 0, r: 180 },
    // ]) {
    //   const arrow8 = Sprite.from(arrow8Texture)
    //   arrow8.anchor.set(0.5, 0.5)
    //   arrow8.scale.set(getScale())
    //   arrow8.position.set(p.x * YmToPx, p.y * YmToPx)
    //   arrow8.rotation = (p.r / 180) * Math.PI
    //   container.addChild(arrow8)
    // }

    await setWaymark(container, waymarkData, 0.5)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
