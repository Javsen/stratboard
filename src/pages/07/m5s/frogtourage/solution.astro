---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import floor1_img from '/assets/07/m5s/floor_1@3x.png?url'
  import floor_frogtourage_1_img from '/assets/07/m5s/floor_frogtourage_1@3x.png?url'
  import floor_frogtourage_2_img from '/assets/07/m5s/floor_frogtourage_2@3x.png?url'
  import omen_img from '/assets/fan/360_r20@3x.png?url'
  import target_ring_img from '/assets/target_ring/r5@3x.png?url'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor1_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    const squareMask = new Graphics()
    const width = 40 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const floorFrogtourage1Texture = await Assets.load(floor_frogtourage_1_img)
    const floorFrogtourage2Texture = await Assets.load(floor_frogtourage_2_img)
    const floorFrogtourageTextures = [floorFrogtourage1Texture, floorFrogtourage2Texture]

    // const name = 'frogtourage-solution-1'
    // const radius = 0.2
    // const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
    //   { type: 'tank', tag: 'MT', x: -3.75, y: -11 },
    //   { type: 'tank', tag: 'ST', x: 3.75, y: -11 },
    //   { type: 'melee', tag: 'D1', x: -3.75, y: 11 },
    //   { type: 'melee', tag: 'D2', x: 3.75, y: 11 },
    //   { type: 'healer', tag: 'H1', x: -3.75, y: 14 },
    //   { type: 'healer', tag: 'H2', x: 3.75, y: 14 },
    //   { type: 'ranged', tag: 'D3', x: -3.75, y: -14 },
    //   { type: 'magic', tag: 'D4', x: 3.75, y: -14 },
    // ]
    // const omenParams = [
    //   { x: -3.75, y: -12.5 },
    //   { x: 3.75, y: -12.5 },
    //   { x: -3.75, y: 12.5 },
    //   { x: 3.75, y: 12.5 },
    // ]
    // const floorFrogtourage1 = Sprite.from(floorFrogtourageTextures[0])
    // floorFrogtourage1.anchor.set(0.5, 0.5)
    // floorFrogtourage1.scale.set(getScale())
    // container.addChild(floorFrogtourage1)

    // const name = 'frogtourage-solution-2'
    // const radius = 0.2
    // const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
    //   { type: 'tank', tag: 'MT', x: -11, y: -3.75 },
    //   { type: 'tank', tag: 'ST', x: 11, y: -3.75 },
    //   { type: 'melee', tag: 'D1', x: -11, y: 3.75 },
    //   { type: 'melee', tag: 'D2', x: 11, y: 3.75 },
    //   { type: 'healer', tag: 'H1', x: -14, y: 3.75 },
    //   { type: 'healer', tag: 'H2', x: 14, y: 3.75 },
    //   { type: 'ranged', tag: 'D3', x: -14, y: -3.75 },
    //   { type: 'magic', tag: 'D4', x: 14, y: -3.75 },
    // ]
    // const omenParams = [
    //   { x: -12.5, y: -3.75 },
    //   { x: 12.5, y: -3.75 },
    //   { x: -12.5, y: 3.75 },
    //   { x: 12.5, y: 3.75 },
    // ]
    // const floorFrogtourage2 = Sprite.from(floorFrogtourageTextures[1])
    // floorFrogtourage2.anchor.set(0.5, 0.5)
    // floorFrogtourage2.scale.set(getScale())
    // container.addChild(floorFrogtourage2)

    // const name = 'frogtourage-solution-3'
    // const radius = 0.25
    // const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
    //   { type: 'tank', tag: 'MT', x: -3.75, y: -11 },
    //   { type: 'tank', tag: 'ST', x: 3.75, y: -11 },
    //   { type: 'melee', tag: 'D1', x: -3.75, y: 11 },
    //   { type: 'melee', tag: 'D2', x: 3.75, y: 11 },
    //   { type: 'healer', tag: 'H1', x: -3.75, y: 18 },
    //   { type: 'healer', tag: 'H2', x: 3.75, y: 18 },
    //   { type: 'ranged', tag: 'D3', x: -3.75, y: -18 },
    //   { type: 'magic', tag: 'D4', x: 3.75, y: -18 },
    // ]
    // const omenParams = roleParams
    // const floorFrogtourage1 = Sprite.from(floorFrogtourageTextures[0])
    // floorFrogtourage1.anchor.set(0.5, 0.5)
    // floorFrogtourage1.scale.set(getScale())
    // container.addChild(floorFrogtourage1)

    const name = 'frogtourage-solution-4'
    const radius = 0.25
    const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
      { type: 'tank', tag: 'MT', x: -11, y: -3.75 },
      { type: 'tank', tag: 'ST', x: 11, y: -3.75 },
      { type: 'melee', tag: 'D1', x: -11, y: 3.75 },
      { type: 'melee', tag: 'D2', x: 11, y: 3.75 },
      { type: 'healer', tag: 'H1', x: -18, y: 3.75 },
      { type: 'healer', tag: 'H2', x: 18, y: 3.75 },
      { type: 'ranged', tag: 'D3', x: -18, y: -3.75 },
      { type: 'magic', tag: 'D4', x: 18, y: -3.75 },
    ]
    const omenParams = roleParams
    const floorFrogtourage2 = Sprite.from(floorFrogtourageTextures[1])
    floorFrogtourage2.anchor.set(0.5, 0.5)
    floorFrogtourage2.scale.set(getScale())
    container.addChild(floorFrogtourage2)

    await setWaymark(container, waymarkData, 0.5)

    const texture = await Assets.load(omen_img)
    omenParams.forEach((r) => {
      const sprite = new Sprite(texture)
      sprite.anchor.set(0.5, 0.5)
      sprite.scale.set(getScale() * radius)
      sprite.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(sprite)
    })

    const angle = Math.atan(roleParams[0].x / roleParams[0].y)
    const target_circle_texture = await Assets.load(target_ring_img)
    const target_circle = Sprite.from(target_circle_texture)
    target_circle.anchor.set(0.5, 0.54)
    target_circle.rotation = -angle
    container.addChild(target_circle)

    const roles: Role[] = []
    roleParams.forEach((r) => {
      const role = new Role(r.type, r.tag)
      role.scale.set(0.4)
      role.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(role)
      roles.push(role)
    })

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
