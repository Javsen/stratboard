---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import floor_img from '/assets/07/m5s/floor_3@3x.png?url'
  import funky_floor_A from '/assets/07/m5s/funky_floor_1@3x.png?url'

  function calcSpotlightPositions(s: number) {
    let x1, y1, x2, y2
    if (s === 0) {
      x1 = -2.5
      y1 = -7.5
    } else {
      x1 = -2.5
      y1 = 7.5
    }
    if (s === 0) {
      x2 = -12.5
      y2 = -12.5
    } else {
      x2 = 12.5
      y2 = -12.5
    }
    return [
      { x: x1, y: y1 },
      { x: -x1, y: -y1 },
      { x: y1, y: -x1 },
      { x: -y1, y: x1 },
      { x: x2, y: y2 },
      { x: -x2, y: -y2 },
      { x: y2, y: -x2 },
      { x: -y2, y: x2 },
    ]
  }

  const name = 'implementation_1'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    const funkyFloorTexture = await Assets.load(funky_floor_A)
    const funkyFloor = Sprite.from(funkyFloorTexture)
    funkyFloor.anchor.set(0.5, 0.5)
    funkyFloor.scale.set(getScale())
    container.addChild(funkyFloor)

    await setWaymark(container, waymarkData, 0.5)

    const squareMask = new Graphics()
    const width = 40 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const spotlightTexture = await Assets.load('/assets/07/m5s/spotlight@3x.png')

    const spotlights = new Container()
    container.addChild(spotlights)

    const positions = calcSpotlightPositions(0)

    for (const position of positions) {
      const spotlight = new Sprite(spotlightTexture)
      spotlight.anchor.set(0.5, 0.5)
      spotlight.scale.set(getScale())
      spotlight.position.set(position.x * YmToPx, position.y * YmToPx)
      spotlights.addChild(spotlight)
    }

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
