---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import floor_img from '/assets/07/m5s/floor_4@3x.png?url'
  import vfx_circle_img from '/assets/game/vfx/monster/gimmick5/eff/x6r5_b1_g02_c0x@3x.png?url'
  import vfx_fan_img from '/assets/game/vfx/monster/gimmick5/eff/x6r5_b1_g04_c0x@3x.png?url'

  const name = 'solution_2'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container1 = new Container()
    container1.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container1)

    const container2 = new Container()
    container2.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container2)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container1.addChild(floor)

    await setWaymark(container1, waymarkData, 0.5)

    const vfx_circle_Texture = await Assets.load(vfx_circle_img)
    const vfx_circle = Sprite.from(vfx_circle_Texture)
    vfx_circle.anchor.set(0.5, 0.5)
    vfx_circle.scale.set(getScale())
    container1.addChild(vfx_circle)

    const vfx_fan_Texture = await Assets.load(vfx_fan_img)
    const vfx_fan = Sprite.from(vfx_fan_Texture)
    vfx_fan.pivot.set((-20 * YmToPx) / getScale(), 0)
    vfx_fan.anchor.set(0.5, 0.5)
    vfx_fan.rotation = (-Math.PI * 7) / 8
    vfx_fan.scale.set(getScale())
    container1.addChild(vfx_fan)

    const ratio = 1.25
    container1.scale.set(ratio)

    const squareMask = new Graphics()
    const width = 25 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container1.mask = squareMask
    container1.addChild(squareMask)

    const radius = 8 * YmToPx * ratio
    const radian = Math.PI / 8

    const MT = new Role('tank', 'MT')
    MT.scale.set(0.4)
    MT.position.set(-radius * Math.sin(radian), -radius * Math.cos(radian))
    container2.addChild(MT)

    const ST = new Role('tank', 'ST')
    ST.scale.set(0.4)
    ST.position.set(radius * Math.sin(radian), -radius * Math.cos(radian))
    container2.addChild(ST)

    const H1 = new Role('healer', 'H1')
    H1.scale.set(0.4)
    H1.position.set(-radius * Math.cos(radian), -radius * Math.sin(radian))
    container2.addChild(H1)

    const H2 = new Role('healer', 'H2')
    H2.scale.set(0.4)
    H2.position.set(radius * Math.cos(radian), -radius * Math.sin(radian))
    container2.addChild(H2)

    const D1 = new Role('melee', 'D1')
    D1.scale.set(0.4)
    D1.position.set(-radius * Math.sin(radian), radius * Math.cos(radian))
    container2.addChild(D1)

    const D2 = new Role('melee', 'D2')
    D2.scale.set(0.4)
    D2.position.set(radius * Math.sin(radian), radius * Math.cos(radian))
    container2.addChild(D2)

    const D3 = new Role('ranged', 'D3')
    D3.scale.set(0.4)
    D3.position.set(-radius * Math.cos(radian), radius * Math.sin(radian))
    container2.addChild(D3)

    const D4 = new Role('magic', 'D4')
    D4.scale.set(0.4)
    D4.position.set(radius * Math.cos(radian), radius * Math.sin(radian))
    container2.addChild(D4)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
