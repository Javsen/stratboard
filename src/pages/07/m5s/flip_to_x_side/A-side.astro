---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { DropShadowFilter } from 'pixi-filters'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import mark_img from '/assets/07/m5s/A-side_mark.png?url'
  import floor1_img from '/assets/07/m5s/floor_1@3x.png?url'
  import floor2_img from '/assets/07/m5s/floor_2@3x.png?url'
  import x6r5_b1_g05_c0x_img from '/assets/game/vfx/monster/gimmick5/eff/x6r5_b1_g05_c0x@3x.png?url'

  const name = 'A-side'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor1_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    const floorWithTargetCircleTexture = await Assets.load(floor2_img)
    const floorWithTargetCircle = Sprite.from(floorWithTargetCircleTexture)
    floorWithTargetCircle.anchor.set(0.5, 0.5)
    floorWithTargetCircle.scale.set(getScale())
    container.addChild(floorWithTargetCircle)

    const circleMask = new Graphics()
    circleMask.circle(0, 0, 80)
    circleMask.fill({ color: 'white' })
    floorWithTargetCircle.mask = circleMask
    container.addChild(circleMask)

    await setWaymark(container, waymarkData, 0.5)

    const x6r5_b1_g05_c0x_Texture = await Assets.load(x6r5_b1_g05_c0x_img)
    const x6r5_b1_g05_c0x = [
      Sprite.from(x6r5_b1_g05_c0x_Texture),
      Sprite.from(x6r5_b1_g05_c0x_Texture),
      Sprite.from(x6r5_b1_g05_c0x_Texture),
    ]
    x6r5_b1_g05_c0x[0].pivot.set((-25 * YmToPx) / getScale(60), 0)
    x6r5_b1_g05_c0x[1].pivot.set((-25 * YmToPx) / getScale(60), 0)
    x6r5_b1_g05_c0x[2].pivot.set((-25 * YmToPx) / getScale(60), 0)
    x6r5_b1_g05_c0x[0].anchor.set(0.5, 0.5)
    x6r5_b1_g05_c0x[1].anchor.set(0.5, 0.5)
    x6r5_b1_g05_c0x[2].anchor.set(0.5, 0.5)
    x6r5_b1_g05_c0x[0].rotation = Math.PI * (-1 / 2)
    x6r5_b1_g05_c0x[1].rotation = Math.PI * (1 / 6)
    x6r5_b1_g05_c0x[2].rotation = Math.PI * (5 / 6)
    x6r5_b1_g05_c0x[0].scale.set(getScale(60))
    x6r5_b1_g05_c0x[1].scale.set(getScale(60))
    x6r5_b1_g05_c0x[2].scale.set(getScale(60))
    container.addChild(x6r5_b1_g05_c0x[0])
    container.addChild(x6r5_b1_g05_c0x[1])
    container.addChild(x6r5_b1_g05_c0x[2])

    const squareMask = new Graphics()
    const width = 40 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const distance = 7 * YmToPx
    const x = distance * Math.sin(Math.PI / 3)
    const y = distance * Math.cos(Math.PI / 3)

    const T = new Role('tank')
    T.scale.set(0.4)
    T.position.set(0, -distance)
    container.addChild(T)

    const H = new Role('healer')
    H.scale.set(0.4)
    H.position.set(-x, y)
    container.addChild(H)

    const D = new Role('dps')
    D.scale.set(0.4)
    D.position.set(x, y)
    container.addChild(D)

    const markTexture = await Assets.load(mark_img)
    const mark = Sprite.from(markTexture)
    mark.anchor.set(0.5, 0.5)
    mark.scale.set(getScale(5, 0.78))
    const shadow = Sprite.from(markTexture)
    shadow.anchor.set(0.5, 0.5)
    shadow.scale.set(getScale(5, 0.78) * 1.02)
    shadow.filters = [
      new DropShadowFilter({
        offset: { x: 0, y: 0 },
        color: '#09090b',
        alpha: 1,
        blur: 4,
        quality: 10,
        shadowOnly: true,
      }),
    ]
    container.addChild(shadow)
    container.addChild(mark)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
