---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import frogfloor_c3456_img from '/assets/07/m5s/frog_floor_c3456@3x.png?url'
  import frogfloor_r123678_img from '/assets/07/m5s/frog_floor_r123678@3x.png?url'
  import fan_img from '/assets/fan/45_y20@3x.png?url'
  import target_ring_img from '/assets/target_ring/r5@3x.png?url'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const index = 1
    const name = `frogtourage-p3-part2-${index}`
    const frogParams = [
      { x: -5, y: -5 },
      { x: 5, y: -5 },
      { x: 5, y: 5 },
      { x: -5, y: 5 },
    ]
    const params = [
      { x: -7.5, y: -4, type: 'ranged', tag: 'D3' },
      { x: 7.5, y: -4, type: 'magic', tag: 'D4' },
      { x: -7.5, y: 4, type: 'melee', tag: 'D1' },
      { x: 7.5, y: 4, type: 'melee', tag: 'D2' },
      { x: 0, y: -1.25, type: 'tank', tag: '' },
      { x: 0, y: 1.25, type: 'healer', tag: '' },
    ]

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const frogfloor_r123678_texture = await Assets.load(frogfloor_r123678_img)
    const frogfloor_c3456_texture = await Assets.load(frogfloor_c3456_img)
    const frogfloor_textures = [frogfloor_r123678_texture, frogfloor_c3456_texture]
    const frogfloor = Sprite.from(frogfloor_textures[0])
    frogfloor.anchor.set(0.5, 0.5)
    frogfloor.scale.set(getScale())
    container.addChild(frogfloor)

    await setWaymark(container, waymarkData, 0.5)

    const squareMask = new Graphics()
    const width = 40 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const angle = Math.atan(2.5)
    const fan_texture = await Assets.load(fan_img)
    for (let i = 0; i < 4; i++) {
      const fan = Sprite.from(fan_texture)
      fan.pivot.set(0, (-20 / getScale()) * YmToPx)
      fan.anchor.set(0.5, 0.5)
      fan.scale.set(getScale())
      fan.position.set(frogParams[i].x * YmToPx, frogParams[i].y * YmToPx)
      fan.rotation = [angle, -angle, Math.PI + angle, Math.PI - angle][i]
      container.addChild(fan)
    }

    const target_circle_texture = await Assets.load(target_ring_img)
    const target_circle = Sprite.from(target_circle_texture)
    target_circle.anchor.set(0.5, 0.54)
    container.addChild(target_circle)

    for (const p of frogParams) {
      const r = new Role('enemy_level1', 'è›™')
      r.scale.set(0.5)
      r.position.set(p.x * YmToPx, p.y * YmToPx)
      container.addChild(r)
    }

    for (const p of params) {
      const r = new Role(p.type as RoleType, p.tag)
      r.scale.set(0.4)
      r.position.set(p.x * YmToPx, p.y * YmToPx)
      container.addChild(r)
    }

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
