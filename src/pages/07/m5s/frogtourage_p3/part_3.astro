---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import floor1_img from '/assets/07/m5s/floor_1@3x.png?url'
  import frog_target_ring_img from '/assets/07/m5s/frog_target_ring@3x.png?url'
  import fan_img from '/assets/fan/180@3x.png?url'
  import target_ring_img from '/assets/target_ring/r5@3x.png?url'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor1_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkData, 0.5)

    const squareMask = new Graphics()
    const width = 40 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const fan_texture = await Assets.load(fan_img)
    const fan1 = Sprite.from(fan_texture)
    fan1.anchor.set(0.5, 0.5)
    fan1.scale.set(2)
    fan1.rotation = -Math.PI * 0.5
    container.addChild(fan1)

    const fan2 = Sprite.from(fan_texture)
    fan2.anchor.set(0.5, 0.5)
    fan2.scale.set(2)
    fan2.position.set(-10 * YmToPx, -10 * YmToPx)
    fan2.rotation = Math.PI * 0.25
    container.addChild(fan2)

    const fan3 = Sprite.from(fan_texture)
    fan3.anchor.set(0.5, 0.5)
    fan3.scale.set(2)
    fan3.position.set(-10 * YmToPx, 10 * YmToPx)
    fan3.rotation = -Math.PI * 0.25
    container.addChild(fan3)

    const target_circle_texture = await Assets.load(target_ring_img)
    const target_circle = Sprite.from(target_circle_texture)
    target_circle.anchor.set(0.5, 0.54)
    container.addChild(target_circle)

    const frog_target_circle_texture = await Assets.load(frog_target_ring_img)
    const frog1 = Sprite.from(frog_target_circle_texture)
    frog1.anchor.set(0.5, 0.5)
    frog1.scale.set(getScale())
    frog1.position.set(-10 * YmToPx, -10 * YmToPx)
    frog1.rotation = -Math.PI * 0.25
    container.addChild(frog1)

    const frog2 = Sprite.from(frog_target_circle_texture)
    frog2.anchor.set(0.5, 0.5)
    frog2.scale.set(getScale())
    frog2.position.set(-10 * YmToPx, 10 * YmToPx)
    frog2.rotation = -Math.PI * 0.75
    container.addChild(frog2)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
