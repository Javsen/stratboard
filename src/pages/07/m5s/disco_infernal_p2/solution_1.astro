---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/pixi/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import floor1_img from '/assets/07/m5s/floor_1@3x.png?url'
  import floor2_img from '/assets/07/m5s/floor_2@3x.png?url'

  const name = 'solution_1'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor1_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    const floorWithTargetCircleTexture = await Assets.load(floor2_img)
    const floorWithTargetCircle = Sprite.from(floorWithTargetCircleTexture)
    floorWithTargetCircle.anchor.set(0.5, 0.5)
    floorWithTargetCircle.scale.set(getScale())
    container.addChild(floorWithTargetCircle)

    const circleMask = new Graphics()
    circleMask.circle(0, 0, 80)
    circleMask.fill({ color: 'white' })
    floorWithTargetCircle.mask = circleMask
    container.addChild(circleMask)

    await setWaymark(container, waymarkData, 0.5)

    const squareMask = new Graphics()
    const width = 40 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const frogParams = [
      { x: -5, y: -5 },
      { x: 5, y: -5 },
      { x: -5, y: 5 },
      { x: 5, y: 5 },
      { x: -5 * Math.SQRT2, y: 0 },
      { x: 0, y: -5 * Math.SQRT2 },
      { x: 5 * Math.SQRT2, y: 0 },
      { x: 0, y: 5 * Math.SQRT2 },
    ]
    const spotParams = [
      { x: 0, y: -15 },
      { x: 15, y: 0 },
      { x: 0, y: 15 },
      { x: -15, y: 0 },
      { x: -15, y: -15 },
      { x: 15, y: -15 },
      { x: -15, y: 15 },
      { x: 15, y: 15 },
    ]
    const params = [
      { x: -6.3, y: -11.8, type: 'tank', tag: 'MT' },
      { x: -8.7, y: -11.8, type: 'ranged', tag: 'D3' },
      { x: 10.6, y: -7.5, type: 'tank', tag: 'ST' },
      { x: 13, y: -7.5, type: 'magic', tag: 'D4' },
      { x: -13, y: 7.5, type: 'healer', tag: 'H1' },
      { x: -10.6, y: 7.5, type: 'melee', tag: 'D1' },
      { x: 6.3, y: 11.8, type: 'healer', tag: 'H2' },
      { x: 8.7, y: 11.8, type: 'melee', tag: 'D2' },
    ]
    for (const p of frogParams) {
      const r = new Role('enemy_level1', 'è›™')
      r.scale.set(0.5)
      r.position.set(p.x * YmToPx, p.y * YmToPx)
      container.addChild(r)
    }
    const spotlightTexture = await Assets.load('/assets/07/m5s/spotlight@3x.png')
    for (const p of spotParams) {
      const spotlight = new Sprite(spotlightTexture)
      spotlight.anchor.set(0.5, 0.5)
      spotlight.scale.set(getScale())
      spotlight.position.set(p.x * YmToPx, p.y * YmToPx)
      container.addChild(spotlight)
    }
    for (const p of params) {
      const r = new Role(p.type as RoleType, p.tag)
      r.scale.set(0.4)
      r.position.set(p.x * YmToPx, p.y * YmToPx)
      container.addChild(r)
    }

    const g1 = new Graphics()
    g1.rect(3.5 * YmToPx, -18 * YmToPx, 14.5 * YmToPx, 21 * YmToPx)
    g1.stroke({ color: '#fde047', width: 1.5 })
    container.addChild(g1)

    const g2 = new Graphics()
    g2.rect(3.5 * YmToPx, -18 * YmToPx, 14.5 * YmToPx, 21 * YmToPx)
    g2.rotation = Math.PI / 2
    g2.stroke({ color: '#93c5fd', width: 1.5 })
    container.addChild(g2)

    const g3 = new Graphics()
    g3.rect(3.5 * YmToPx, -18 * YmToPx, 14.5 * YmToPx, 21 * YmToPx)
    g3.rotation = Math.PI
    g3.stroke({ color: '#d8b4fe', width: 1.5 })
    container.addChild(g3)

    const g4 = new Graphics()
    g4.rect(3.5 * YmToPx, -18 * YmToPx, 14.5 * YmToPx, 21 * YmToPx)
    g4.rotation = -Math.PI / 2
    g4.stroke({ color: '#fca5a5', width: 1.5 })
    container.addChild(g4)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
