---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/pixi/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_waymark'

  import floor1_img from '/assets/07/m5s/floor_1@3x.png?url'
  import floor2_img from '/assets/07/m5s/floor_2@3x.png?url'
  import fan_45_img from '/assets/fan/45_y20@3x.png?url'

  const name = 'solution_3'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor1_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    const floorWithTargetCircleTexture = await Assets.load(floor2_img)
    const floorWithTargetCircle = Sprite.from(floorWithTargetCircleTexture)
    floorWithTargetCircle.anchor.set(0.5, 0.5)
    floorWithTargetCircle.scale.set(getScale())
    container.addChild(floorWithTargetCircle)

    const circleMask = new Graphics()
    circleMask.circle(0, 0, 80)
    circleMask.fill({ color: 'white' })
    floorWithTargetCircle.mask = circleMask
    container.addChild(circleMask)

    await setWaymark(container, waymarkData, 0.5)

    const squareMask = new Graphics()
    const width = 40 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const frogParams = [
      { x: -5, y: -5 },
      { x: 5, y: -5 },
      { x: 5, y: 5 },
      { x: -5, y: 5 },
    ]
    const spotParams = [
      { x: -15, y: -15 },
      { x: 15, y: -15 },
      { x: -15, y: 15 },
      { x: 15, y: 15 },
    ]
    const params = [
      {
        x: -15,
        y: -15,
        type: 'tank',
        tag: 'MT',
      },
      {
        x: -5,
        y: -8,
        type: 'ranged',
        tag: 'D3',
      },
      {
        x: 15,
        y: -15,
        type: 'tank',
        tag: 'ST',
      },
      {
        x: 8,
        y: -5,
        type: 'magic',
        tag: 'D4',
      },
      {
        x: -15,
        y: 15,
        type: 'healer',
        tag: 'H1',
      },
      {
        x: -8,
        y: 5,
        type: 'melee',
        tag: 'D1',
      },
      {
        x: 15,
        y: 15,
        type: 'healer',
        tag: 'H2',
      },
      {
        x: 5,
        y: 8,
        type: 'melee',
        tag: 'D2',
      },
    ]
    const fan_45_texture = await Assets.load(fan_45_img)
    for (let i = 0; i < 4; i++) {
      const fan = Sprite.from(fan_45_texture)
      fan.pivot.set(0, (-20 / getScale()) * YmToPx)
      fan.anchor.set(0.5, 0.5)
      fan.scale.set(getScale())
      fan.position.set(frogParams[i].x * YmToPx, frogParams[i].y * YmToPx)
      fan.rotation = (Math.PI / 2) * i + Math.PI
      container.addChild(fan)
    }
    for (const p of frogParams) {
      const r = new Role('enemy_level1')
      r.scale.set(0.5)
      r.position.set(p.x * YmToPx, p.y * YmToPx)
      container.addChild(r)
    }
    const spotlightTexture = await Assets.load('/assets/07/m5s/spotlight@3x.png')
    for (const p of spotParams) {
      const spotlight = new Sprite(spotlightTexture)
      spotlight.anchor.set(0.5, 0.5)
      spotlight.scale.set(getScale())
      spotlight.position.set(p.x * YmToPx, p.y * YmToPx)
      container.addChild(spotlight)
    }
    for (const p of params) {
      const r = new Role(p.type as RoleType, p.tag)
      r.scale.set(0.4)
      r.position.set(p.x * YmToPx, p.y * YmToPx)
      container.addChild(r)
    }

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
