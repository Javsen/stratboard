---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M8S1">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" canvasClass="h-full w-full" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { getScale, YmToPx } from '@/pixi/utils'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { createCircleAoE } from '../_aoe'
  import { createTargetRing } from '../_target'
  import { waymarkData } from '../_waymark'

  import floor_img from '/assets/07/m8s1/floor_1@3x.png?url'
  import arrow_img from '/assets/07/m8s1/xreign/arrow@2x.png?url'

  const name = '1'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale(50, 0.78))
    container.addChild(floor)

    const aoe = createCircleAoE(app, 6, [{ r: 0, a: 0 }])
    container.addChild(aoe)

    await setWaymark(container, waymarkData, 0.65)

    const targetRing = await createTargetRing()
    container.addChild(targetRing)

    // 添加表示冲锋幻象的箭头（正三角）
    const arrowTexture = await Assets.load(arrow_img)
    const arrowParams = [
      { r: 1.6, a: -90 },
      { r: 1.6, a: 30 },
      { r: 1.6, a: 150 },
    ]
    arrowParams.forEach((p) => {
      const radius = p.r * YmToPx
      const radian = (p.a * Math.PI) / 180
      const arrow = Sprite.from(arrowTexture)
      arrow.anchor.set(0, 0.5)
      arrow.position.set(radius * Math.cos(radian), radius * Math.sin(radian))
      arrow.rotation = radian
      container.addChild(arrow)
    })

    const circleMask = new Graphics()
    const circleRadius = 15.1 * YmToPx
    circleMask.circle(0, 0, circleRadius)
    circleMask.fill({ color: 'white' })
    container.mask = circleMask
    container.addChild(circleMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
