---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M8S1">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" canvasClass="h-full w-full" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { createCircles } from '../../_aoe'
  import { createMaskTargetRing } from '../../_target'

  import floor_img from '/assets/07/m8s1/floor_1@3x.png?url'

  const name = '8'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale(50, 0.78))
    container.addChild(floor)

    const bossPosition = { r: 7, deg: 330 }
    const bossRotation = -120

    const aoe = createCircles(app, [{ position: bossPosition }], 14)
    container.addChild(aoe)

    await setWaymark(
      container,
      {
        A: { X: 0, Z: -8.5 },
        B: { X: 8.5, Z: 0 },
        C: { X: 0, Z: 8.5 },
        D: { X: -8.5, Z: 0 },
        One: { X: -6, Z: -6, alpha: 1 },
        Two: { X: 6, Z: -6 },
        Three: { X: 6, Z: 6, alpha: 1 },
        Four: { X: -6, Z: 6 },
      },
      0.5,
    )

    const targetRing = await createMaskTargetRing(bossPosition, bossRotation)
    container.addChild(targetRing)

    const lines = new Graphics()
    lines.rect(-7.3 * YmToPx, -20 * YmToPx, 0.2 * YmToPx, 40 * YmToPx)
    lines.fill({ color: 'white' })
    lines.stroke({ color: '#db2777', pixelLine: true })
    lines.rect(-4.9 * YmToPx, -20 * YmToPx, 0.2 * YmToPx, 40 * YmToPx)
    lines.fill({ color: 'white' })
    lines.stroke({ color: '#db2777', pixelLine: true })
    lines.rect(7.1 * YmToPx, -20 * YmToPx, 0.2 * YmToPx, 40 * YmToPx)
    lines.fill({ color: 'white' })
    lines.stroke({ color: '#db2777', pixelLine: true })
    lines.rect(4.7 * YmToPx, -20 * YmToPx, 0.2 * YmToPx, 40 * YmToPx)
    lines.fill({ color: 'white' })
    lines.stroke({ color: '#db2777', pixelLine: true })
    container.addChild(lines)

    const tankPositions = [
      { x: -7.2, y: -9, color: '#2563eb' },
      { x: -4.8, y: -10.5, color: '#dc2626' },
      { x: 7.2, y: 9.2, color: '#dc2626' },
      { x: 4.8, y: 10.6, color: '#2563eb' },
    ]

    const dot = new Graphics()
    tankPositions.forEach((tankPosition) => {
      dot.circle(tankPosition.x * YmToPx, tankPosition.y * YmToPx, 0.3 * YmToPx)
      dot.fill({ color: tankPosition.color })
      dot.stroke({ color: '#ffffff', width: 1 })
    })
    container.addChild(dot)

    const circleMask = new Graphics()
    const circleRadius = 15.1 * YmToPx
    circleMask.circle(0, 0, circleRadius)
    circleMask.fill({ color: 'white' })
    container.mask = circleMask
    container.addChild(circleMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
