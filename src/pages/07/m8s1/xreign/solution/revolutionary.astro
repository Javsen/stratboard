---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M8S1">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" canvasClass="h-full w-full" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { AoE, AOE_COLORS } from '@/pixi/aoe'
  import {
    convertCoordinates,
    degToRad,
    extendCoordinates,
    findCircleIntersections,
    getAbsoluteCoordinates,
    getRelativeCoordinates,
    normalizeAngleDeg,
    rotatePoint,
  } from '@/pixi/coordinates'
  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { createCircles } from '../../_aoe'
  import { createMaskTargetRing } from '../../_target'
  import { waymarkData } from '../../_waymark'

  import floor_img from '/assets/07/m8s1/floor_1@3x.png?url'

  const name = 'revolutionary'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale(50, 0.78))
    container.addChild(floor)

    const bossPosition = { r: 7, deg: -30 }
    const bossRotation = -120
    const rotation = degToRad(bossRotation / 2)

    const aoe = createCircles(app, [{ position: bossPosition, options: { colors: AOE_COLORS.tailwind.red } }], 14)
    container.addChild(aoe)

    const intersections = findCircleIntersections({ x: 0, y: 0 }, 12, bossPosition, 14)! // 计算钢铁和电网内边缘交点
      .map((v) => getRelativeCoordinates(v, bossPosition)) // 转换为BOSS中心坐标系
      .map((v) => convertCoordinates(v, 'polar-angle')) // 转换为极坐标
      .map((v) => ({ r: v.r, deg: normalizeAngleDeg(v.deg) })) // 角度标准化（0~360）
      .sort((a, b) => a.deg - b.deg) // 按角度排序
      .map((v) => convertCoordinates({ r: v.r, deg: v.deg }, 'cartesian')) // 转换为笛卡尔坐标

    const tankRelativePositions = intersections.map((v, i) =>
      rotatePoint(v, { x: 0, y: 0 }, degToRad(6 * (i % 2 === 0 ? 1 : -1))),
    )

    const tankRotations = tankRelativePositions
      .map((v) => convertCoordinates(v, 'polar-angle')) // 转换为极坐标
      .map((v) => v.deg) // 取角度

    const tankPositions = tankRelativePositions
      .map((v) => extendCoordinates(v, 0.4))
      .map((v) => getAbsoluteCoordinates(v, bossPosition)) // 转换回初始坐标系

    const healerRelativePositions = intersections.map((v, i) =>
      rotatePoint(v, { x: 0, y: 0 }, degToRad(45 * (i % 2 === 0 ? 1 : -1))),
    )

    const healerRotations = healerRelativePositions
      .map((v) => convertCoordinates(v, 'polar-angle')) // 转换为极坐标
      .map((v) => v.deg) // 取角度

    const healerPositions = healerRelativePositions
      .map((v) => extendCoordinates(v, 4)) // 延长2米
      .map((v) => getAbsoluteCoordinates(v, bossPosition)) // 转换回初始坐标系

    const fans = AoE.createFans(
      app,
      [
        {
          position: bossPosition,
          rotation: tankRotations[0],
          angle: 60,
          options: { colors: AOE_COLORS.tailwind.blue },
        },
        {
          position: bossPosition,
          rotation: tankRotations[1],
          angle: 60,
          options: { colors: AOE_COLORS.tailwind.blue },
        },
        {
          position: bossPosition,
          rotation: healerRotations[0],
          angle: 30,
          options: { colors: AOE_COLORS.tailwind.green },
        },
        {
          position: bossPosition,
          rotation: healerRotations[1],
          angle: 30,
          options: { colors: AOE_COLORS.tailwind.green },
        },
      ],
      40,
    )
    container.addChild(fans)

    const waymarks = await setWaymark(container, waymarkData, 0.65)
    for (const waymark of waymarks.values()) {
      waymark.fgSprite!.rotation = -rotation
    }

    const targetRing = await createMaskTargetRing(bossPosition, bossRotation)
    container.addChild(targetRing)

    const dot = new Graphics()
    dot.circle(healerPositions[0].x * YmToPx, healerPositions[0].y * YmToPx, 0.3 * YmToPx)
    dot.circle(healerPositions[1].x * YmToPx, healerPositions[1].y * YmToPx, 0.3 * YmToPx)
    dot.fill({ color: '#16a34a' })
    dot.stroke({ color: '#ffffff', width: 1 })
    dot.circle(tankPositions[0].x * YmToPx, tankPositions[0].y * YmToPx, 0.3 * YmToPx)
    dot.circle(tankPositions[1].x * YmToPx, tankPositions[1].y * YmToPx, 0.3 * YmToPx)
    dot.fill({ color: '#2563eb' })
    dot.stroke({ color: '#ffffff', width: 1 })
    container.addChild(dot)

    const tPositions = tankRelativePositions
      .map((v) => extendCoordinates(v, +1.9))
      .map((v) => getAbsoluteCoordinates(v, bossPosition)) // 转换回初始坐标系

    const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
      { type: 'tank', tag: 'MT', x: tPositions[1].x, y: tPositions[1].y },
      { type: 'tank', tag: 'ST', x: tPositions[0].x, y: tPositions[0].y },
    ]
    roleParams.forEach((r) => {
      const role = new Role(r.type, r.tag)
      role.scale.set(0.4 * 0.78)
      role.position.set(r.x * YmToPx, r.y * YmToPx)
      role.rotation = -rotation
      container.addChild(role)
    })

    container.rotation = rotation

    const roleParams1: { type: RoleType; tag: string; x: number; y: number }[] = [
      { type: 'healer', tag: 'H1', x: -2.75, y: 12.75 },
      { type: 'healer', tag: 'H2', x: 2.75, y: 12.75 },
      { type: 'melee', tag: 'D1', x: -2.75, y: 10.5 },
      { type: 'dps', tag: 'D2', x: 2.75, y: 10.5 },
      { type: 'ranged', tag: 'D3', x: -2.75, y: 8.25 },
      { type: 'magic', tag: 'D4', x: 2.75, y: 8.25 },
    ]
    roleParams1.forEach((r) => {
      const role = new Role(r.type, r.tag)
      role.scale.set(0.4 * 0.78)
      role.position.set(app.screen.width / 2 + r.x * YmToPx, app.screen.height / 2 + r.y * YmToPx)
      app.stage.addChild(role)
    })

    const circleMask = new Graphics()
    const circleRadius = 15.1 * YmToPx
    circleMask.circle(app.screen.width / 2, app.screen.height / 2, circleRadius)
    circleMask.fill({ color: 'white' })
    app.stage.mask = circleMask
    app.stage.addChild(circleMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
