---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M8S1">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" canvasClass="h-full w-full" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { create_chn_arrow01f } from '@/pixi/channeling/chn_arrow01f'
  import { convertCoordinates, type Coordinates, degToRad, distance, scaleCoordinates } from '@/pixi/coordinates'
  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { createMaskTargetRing } from '../_target'
  import { waymarkData } from '../_waymark'

  import wolf_of_wind_img from '/assets/07/m8s1/adds/wolf_of_wind_1@3x.png?url'
  import floor_img from '/assets/07/m8s1/floor_1@3x.png?url'
  import pillar_img from '/assets/tower/pillar@3x.png?url'
  import tower_img from '/game/vfx/omen/eff/m0119_trap_01t@3x.png?url'
  import knockback_img from '/game/vfx/omen/eff/m0501_nockback_omen01d1@3x.png?url'

  const name = 'solution_9'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale(50, 0.78))
    container.addChild(floor)

    const bossPosition = { r: 0, deg: 0 }
    const bossRotation = 0

    const knockbackTexture = await Assets.load(knockback_img)
    const knockback = Sprite.from(knockbackTexture)
    knockback.anchor.set(0.5, 0.5)
    knockback.scale.set(getScale(80))
    container.addChild(knockback)

    await setWaymark(container, waymarkData, 0.65)

    const towerTexture = await Assets.load(tower_img)
    const pillarTexture = await Assets.load(pillar_img)
    const towerPositions = [
      { r: 10, deg: 0 },
      { r: 10, deg: 90 },
      { r: 10, deg: 180 },
      { r: 10, deg: 270 },
    ]
    for (const towerPosition of towerPositions) {
      const position = scaleCoordinates(convertCoordinates(towerPosition, 'cartesian'), YmToPx)
      const tower = Sprite.from(towerTexture)
      tower.anchor.set(0.5, 0.5)
      tower.scale.set(getScale(20, 0.78))
      tower.position = position
      tower.blendMode = 'overlay'
      container.addChild(tower)

      const pillar = Sprite.from(pillarTexture)
      pillar.anchor.set(0.5, 0.5)
      pillar.scale.set(0.16)
      pillar.position = { x: position.x + 0.1 * YmToPx, y: position.y - 0.7 * YmToPx }
      container.addChild(pillar)
    }

    const targetRing = await createMaskTargetRing(bossPosition, bossRotation)
    container.addChild(targetRing)

    const wolfOfWindTexture = await Assets.load(wolf_of_wind_img)
    const wolfOfWindPositions = [
      { r: 9.6, deg: 45 },
      { r: 9.6, deg: 135 },
      { r: 9.6, deg: 225 },
      { r: 9.6, deg: 315 },
    ]

    const roleParams: { type: RoleType; tag: string; p: Coordinates }[] = [
      { type: 'healer', tag: 'H2', p: { r: 3.2, deg: -135 } },
      { type: 'tank', tag: 'MT', p: { r: 3.2, deg: -45 } },
      { type: 'healer', tag: 'H1', p: { r: 3.2, deg: 45 } },
      { type: 'tank', tag: 'ST', p: { r: 3.2, deg: 135 } },
      { type: 'melee', tag: 'D1', p: { r: 3.2, deg: 180 } },
      { type: 'dps', tag: 'D2', p: { r: 3.2, deg: 90 } },
      { type: 'ranged', tag: 'D3', p: { r: 3.2, deg: -90 } },
      { type: 'magic', tag: 'D4', p: { r: 3.2, deg: 0 } },
    ]

    for (let i = 0; i < 4; i++) {
      const from = { r: wolfOfWindPositions[i].r - 0.8, deg: wolfOfWindPositions[i].deg }
      const fromCartesian = convertCoordinates(from, 'cartesian')
      const to = roleParams[i].p
      const toCartesian = convertCoordinates(to, 'cartesian')
      const d = distance(fromCartesian, toCartesian)
      const center = { x: (fromCartesian.x + toCartesian.x) / 2, y: (fromCartesian.y + toCartesian.y) / 2 }
      const tether = await create_chn_arrow01f(app, d * YmToPx)
      tether.position = scaleCoordinates(center, YmToPx)
      tether.rotation = Math.atan2(toCartesian.y - fromCartesian.y, toCartesian.x - fromCartesian.x)
      container.addChild(tether)
    }

    wolfOfWindPositions.forEach((v) => {
      const wolfOfWind = Sprite.from(wolfOfWindTexture)
      wolfOfWind.anchor.set(0.5, 0.5)
      wolfOfWind.position = scaleCoordinates(convertCoordinates(v, 'cartesian'), YmToPx)
      wolfOfWind.rotation = degToRad(v.deg + 90)
      container.addChild(wolfOfWind)
    })

    roleParams.forEach((r) => {
      const role = new Role(r.type, r.tag)
      role.scale.set(0.4 * 0.78)
      role.position = scaleCoordinates(convertCoordinates(r.p, 'cartesian'), YmToPx)
      container.addChild(role)
    })

    const circleMask = new Graphics()
    const circleRadius = 15.1 * YmToPx
    circleMask.circle(0, 0, circleRadius)
    circleMask.fill({ color: 'white' })
    container.mask = circleMask
    container.addChild(circleMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
