---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M7S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkDataDB } from '../_waymark'

  import floor_img from '/assets/07/m7s/floor_p2_3@3x.png?url'
  import wall_img from '/assets/07/m7s/wall/wall_2.png?url'
  import chn_img from '/game/vfx/channeling/eff/chn_m0935dg2_c0p@3x.png?url'
  import flare_img from '/game/vfx/lockon/eff/flare_aoe.png?url'

  const name = 'AbBlink_flare1'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkDataDB, 0.65)

    // 墙体
    const rectParam = { w: 205, h: 45, color: 0x2e8b57 }
    const wallRect = [
      { x: -31, y: 0, w: rectParam.h, h: rectParam.w, r: -Math.PI / 2 }, // 左
      { x: -12, y: -18, w: rectParam.w, h: rectParam.h, r: 0 }, // 上
      { x: 12, y: 18, w: rectParam.w, h: rectParam.h, r: Math.PI }, // 下
    ]

    const wall_texture = await Assets.load(wall_img)

    // 墙体
    wallRect.forEach((r) => {
      const g = new Graphics()
      g.rect(r.x * YmToPx - r.w / 2, r.y * YmToPx - r.h / 2, r.w, r.h)
      g.fill(rectParam.color)
      container.addChild(g)

      const wall = new Sprite(wall_texture)
      wall.anchor.set(0.5, 0.5)
      wall.position.set(r.x * YmToPx, r.y * YmToPx)
      wall.rotation = r.r
      wall.height = 40
      wall.width = 200
      container.addChild(wall)
    })

    // 角色图标
    const roleParam: { type: RoleType; x: number; y: number; a: number }[] = [
      { type: 'tank', x: 1, y: -10, a: 1 },
      { type: 'all', x: 3.5, y: -10, a: 1 },
      { type: 'tank', x: -23.75, y: -11.25, a: 1 },
    ]

    // 连线
    const chnTexture = await Assets.load(chn_img)
    const p1 = { x: roleParam[2].x * YmToPx, y: roleParam[2].y * YmToPx }
    const p2 = { x: wallRect[1].x * YmToPx, y: wallRect[1].y * YmToPx }
    const dx = p2.x - p1.x
    const dy = p2.y - p1.y
    const len = Math.sqrt(dx * dx + dy * dy)
    const angle = Math.atan2(dy, dx)
    const chn = new Sprite(chnTexture)
    chn.anchor.set(0, 0.5)
    chn.position.set((wallRect[1].x + 2.5) * YmToPx, (wallRect[1].y - 2) * YmToPx)
    chn.rotation = angle + Math.PI
    chn.width = len * 1.4
    chn.height = 5 * YmToPx
    container.addChild(chn)

    // 核爆
    const flareTexture = await Assets.load(flare_img)
    const flare = new Sprite(flareTexture)
    flare.anchor.set(0.5, 0.5)
    flare.scale.set(getScale() / 6)
    flare.position.set(roleParam[2].x * YmToPx, (roleParam[2].y + 1) * YmToPx)
    container.addChild(flare)

    const flareTank = new Role(roleParam[2].type)
    flareTank.scale.set(0.4)
    flareTank.position.set(roleParam[2].x * YmToPx, roleParam[2].y * YmToPx)
    flareTank.alpha = roleParam[2].a
    container.addChild(flareTank)

    const chnTank = new Role(roleParam[0].type)
    chnTank.scale.set(0.4)
    chnTank.position.set(roleParam[0].x * YmToPx, roleParam[0].y * YmToPx)
    chnTank.alpha = roleParam[0].a
    container.addChild(chnTank)

    const role = new Role(roleParam[1].type)
    role.scale.set(0.4)
    role.position.set(roleParam[1].x * YmToPx, roleParam[1].y * YmToPx)
    role.alpha = roleParam[1].a
    container.addChild(role)

    // 蒙版
    const rectMask = new Graphics()
    const width = floor.width * 1.5
    const height = floor.height * 1.8
    rectMask.rect(-width / 2 + 0.5, -height / 2, width, height)
    rectMask.fill({ color: 'white' })
    container.addChild(rectMask)
    container.mask = rectMask

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 8
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
