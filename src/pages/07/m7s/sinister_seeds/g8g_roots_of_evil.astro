---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { AoE } from '@/pixi/aoe'
  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { $stratBoards } from '@/stores/stratBoards'

  import floor_img from '/assets/07/m7s/floor_p1_1@3x.png?url'

  const name = 'g8g_roots_of_evil'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    const aoeParams: { x: number; y: number }[] = [
      { x: -5, y: 5 },
      { x: 5, y: 5 },
      { x: 0, y: 0 },
      { x: 0, y: -6 },
    ]
    aoeParams.forEach((r) => {
      const circle = AoE.createCircle(12).toSprite(app)
      circle.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(circle)
    })

    const squareMask = new Graphics()
    const width = 40 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
