---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M7S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale.ts'
  import { $stratBoards } from '@/stores/stratBoards'

  import { drawIceFlower } from './_draw_ice_flower'

  // import { waymarkDataDB } from '../_waymark_p1'
  import floor_img from '/assets/07/m7s/floor_p1_1@3x.png?url'
  import share_img from '/assets/game/vfx/lockon/eff/com_share4a1@3x.png?url'

  const name = 'impact_solution'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    const ice_flower_pos = [
      { x: 10, y: 10 },
      { x: -10, y: 10 },
      { x: 10, y: -10 },
      { x: -10, y: -10 },
    ]

    drawIceFlower(app, container, ice_flower_pos[0])
    drawIceFlower(app, container, ice_flower_pos[1])
    drawIceFlower(app, container, ice_flower_pos[2])
    drawIceFlower(app, container, ice_flower_pos[3])

    // await setWaymark(container, waymarkDataDB, 0.65)

    // 分摊标志
    const shareTexture = await Assets.load(share_img)
    const share_sprite = new Sprite(shareTexture)
    const share_sprite2 = new Sprite(shareTexture)
    share_sprite.anchor.set(0.5, 0.5)
    share_sprite.scale.set((getScale() * 15) / 20)
    share_sprite.position.set(65, 0)
    container.addChild(share_sprite)
    share_sprite2.anchor.set(0.5, 0.5)
    share_sprite2.scale.set((getScale() * 15) / 20)
    share_sprite2.position.set(-65, 0)
    container.addChild(share_sprite2)

    // MT组
    const MT = new Role('tank', 'MT')
    MT.scale.set(0.4)
    MT.position.set(-75, -15)
    container.addChild(MT)
    const H1 = new Role('healer', 'H1')
    H1.scale.set(0.4)
    H1.position.set(-55, -15)
    container.addChild(H1)
    const D1 = new Role('melee', 'D1')
    D1.scale.set(0.4)
    D1.position.set(-75, 15)
    container.addChild(D1)
    const D3 = new Role('ranged', 'D3')
    D3.scale.set(0.4)
    D3.position.set(-55, 15)
    container.addChild(D3)

    // ST组
    const ST = new Role('tank', 'ST')
    ST.scale.set(0.4)
    ST.position.set(55, -15)
    container.addChild(ST)
    const H2 = new Role('healer', 'H2')
    H2.scale.set(0.4)
    H2.position.set(75, -15)
    container.addChild(H2)
    const D2 = new Role('melee', 'D2')
    D2.scale.set(0.4)
    D2.position.set(55, 15)
    container.addChild(D2)
    const D4 = new Role('magic', 'D4')
    D4.scale.set(0.4)
    D4.position.set(75, 15)
    container.addChild(D4)

    // mask
    const squareMask = new Graphics()
    const width = 40 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
